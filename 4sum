class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> result;
        int n = nums.size();
        
        // Sorting the array to efficiently use the two-pointer approach
        sort(nums.begin(), nums.end());

        // First loop: Fixing the first element
        for (int i = 0; i < n - 3; ++i) {
            if (i > 0 && nums[i] == nums[i - 1]) continue; // Skip duplicate elements
            
            // Second loop: Fixing the second element
            for (int j = i + 1; j < n - 2; ++j) {
                if (j > i + 1 && nums[j] == nums[j - 1]) continue; // Skip duplicate elements
                
                int left = j + 1, right = n - 1;

                // Two-pointer approach to find the remaining two numbers
                while (left < right) {
                    long long sum = (long long)nums[i] + nums[j] + nums[left] + nums[right]; // Prevent integer overflow
                    
                    if (sum == target) {
                        result.push_back({nums[i], nums[j], nums[left], nums[right]});

                        // Skip duplicates for third and fourth elements
                        while (left < right && nums[left] == nums[left + 1]) left++;
                        while (left < right && nums[right] == nums[right - 1]) right--;
                        
                        left++;
                        right--;
                    } 
                    else if (sum < target) {
                        left++;  // Increase sum by moving left pointer
                    } 
                    else {
                        right--; // Decrease sum by moving right pointer
                    }
                }
            }
        }
        
        return result;
    }
};
