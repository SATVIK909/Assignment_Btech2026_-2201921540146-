class Solution {
public:
    vector<int> smallestRange(vector<vector<int>>& nums) {
        // Min-heap to store (value, row index, column index)
        priority_queue<pair<int, pair<int, int>>, 
                       vector<pair<int, pair<int, int>>>, 
                       greater<pair<int, pair<int, int>>>> p;

        int minimum = INT_MAX, maximum = INT_MIN;

        // Insert the first element of each row into heap
        for (int i = 0; i < nums.size(); i++) {
            p.push({nums[i][0], {i, 0}});
            maximum = max(maximum, nums[i][0]);  // Track the maximum element
        }

        // Store the smallest range found
        vector<int> ans = {p.top().first, maximum}; 

        while (!p.empty()) {
            auto temp = p.top();
            p.pop();

            int elem = temp.first;
            int row = temp.second.first;
            int col = temp.second.second;

            // If we have exhausted a list, break
            if (col + 1 == nums[row].size()) break;

            // Insert the next element from the same list
            p.push({nums[row][col + 1], {row, col + 1}});
            maximum = max(maximum, nums[row][col + 1]);

            // Update minimum from the heap
            minimum = p.top().first;

            // If we found a smaller range, update ans
            if (maximum - minimum < ans[1] - ans[0]) {
                ans[0] = minimum;
                ans[1] = maximum;
            }
        }

        return ans;
    }
};
